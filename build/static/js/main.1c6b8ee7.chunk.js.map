{"version":3,"sources":["firebase.js","Todo.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","firestore","useStyles","makeStyles","theme","paper","position","width","backgroundColor","palette","background","border","boxShadow","shadows","padding","spacing","Todo","props","classes","useState","open","setOpen","input","setInput","Modal","onClose","e","className","placeholder","todo","value","onChange","event","target","Button","type","onClick","preventDefault","collection","doc","id","set","merge","List","ListItem","ListItemText","primary","secondary","delete","App","todos","setTodos","useEffect","orderBy","onSnapshot","snapshot","docs","map","data","FormControl","InputLabel","Input","disabled","variant","color","add","timestamp","FieldValue","serverTimestamp","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.1c6b8ee7.chunk.js","sourcesContent":["\n\nimport firebase from \"firebase\";\n\nconst firebaseApp = firebase.initializeApp({\n\n    apiKey: \"AIzaSyAiK3-DcJ6_eAnOpYYHXvzIfLTc-rhNgvc\",\n    authDomain: \"todo-app-3ed04.firebaseapp.com\",\n    databaseURL: \"https://todo-app-3ed04.firebaseio.com\",\n    projectId: \"todo-app-3ed04\",\n    storageBucket: \"todo-app-3ed04.appspot.com\",\n    messagingSenderId: \"965229454744\",\n    appId: \"1:965229454744:web:b3df1ff07695e57e92f7ed\",\n    measurementId: \"G-J8WH6J38BF\"\n});\nconst db = firebaseApp.firestore();\n\nexport default db;","import { Button, List, ListItem, ListItemText, Modal } from '@material-ui/core'\nimport React, { useState } from 'react'\nimport './Todo.css';\nimport db from './firebase';\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever';\nimport { makeStyles } from '@material-ui/core/styles';\n\nconst useStyles = makeStyles((theme) => ({\n    paper: {\n        position: 'absolute',\n        width: 400,\n        backgroundColor: theme.palette.background.paper,\n        border: '2px solid #000',\n        boxShadow: theme.shadows[5],\n        padding: theme.spacing(2, 4, 3),\n    },\n}));\nfunction Todo(props) {\n\n    const classes = useStyles();\n    const [open, setOpen] = useState(false);\n    const [input, setInput] = useState();\n\n\n    const updateTodo = (event) => {\n        event.preventDefault();\n\n        db.collection('todos').doc(props.todo.id).set({\n            todo: input\n        }, { merge: true })\n        setOpen(false);\n    }\n    return (\n        <>\n            <Modal\n                open={open}\n                onClose={e => setOpen(false)} >\n                <div className={classes.paper}>\n                    <h1>I am A Modal</h1>\n                    <form>\n                        <input placeholder={props.todo.todo} value={input} onChange={event => setInput(event.target.value)} />\n                        <Button type=\"submit\" onClick={updateTodo}>Update Todo</Button>\n\n                    </form>\n                </div>\n            </Modal>\n            <List className=\"todo__list\">\n                <ListItem>\n                    <ListItemText primary={props.todo.todo} secondary=\"the dead\" />\n\n                </ListItem>\n                <button onClick={e => setOpen(true)}>Edit</button>\n                <DeleteForeverIcon onClick={event => db.collection('todos').doc(props.todo.id).delete()} />\n            </List>\n        </>\n    )\n}\n\nexport default Todo\n","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport Todo from './Todo';\nimport { Button, FormControl, Input, InputLabel } from '@material-ui/core';\nimport db from './firebase';\nimport firebase from 'firebase';\nfunction App() {\n\n  const [todos, setTodos] = useState([]);\n  const [input, setInput] = useState('');\n\n  useEffect(() => {\n    db.collection('todos').orderBy('timestamp', 'desc').onSnapshot(snapshot => {\n      setTodos(snapshot.docs.map(doc => ({ id: doc.id, todo: doc.data().todo })))\n    });\n\n  }, []);\n\n  const addTodo = (event) => {\n    event.preventDefault();\n\n    db.collection('todos').add({\n      todo: input,\n\n      timestamp: firebase.firestore.FieldValue.serverTimestamp()\n    })\n    // setTodos([...todos, input]);\n    setInput('');\n  }\n  return (\n    <div className=\"App\">\n      <h1>Your TODO LIST APP <span>â™‰</span></h1>\n      <form className=\"new__todo\">\n        <FormControl className=\"todo\" >\n          <InputLabel>Write a Todo</InputLabel>\n          <Input value={input} onChange={event => setInput(event.target.value)} />\n          <Button disabled={!input} variant=\"contained\" color=\"primary\" type=\"submit\" onClick={addTodo}>Add To Do</Button>\n\n        </FormControl>\n      </form>\n\n      <ul>\n        {todos.map(todo => (\n          <Todo id={todo.id} todo={todo} />\n        ))}\n      </ul>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}